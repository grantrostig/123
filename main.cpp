/** Copyright (c) Grant Rostig, grantrostig.com 2023. Distributed under the Boost Software License, Version 1.0. (See accompanying file LICENSE_1_0.txt or copy at https://www.boost.org/LICENSE_1_0.txt)
    NOT PRODUCTION QUALITY CODE, just shows learning/teaching example, not real programming, don't copy this style, just playing around
    Reminder of usefull resources:
        https://coliru.stacked-crooked.com/
        https://godbolt.org/
        https://cppinsights.io/
        https://Wandbox.org
        https://cpp.sh/
        https://quick-bench.com/
        https://arnemertz.github.io/online-compilers/
    [[maybe_unused]] int * my_new_var8 = ::new (22,int);
    Language Versions:  clan++ -std=c++2b, g++ -std=c++23 or =gnu++23
    STD Libraries: Gcc: libstdc++; Clang: libc++; Microsoft: msvc/ms stl  // TODO??: how do we link with different libraries than the default using gcc or clang (the exact command line text)?
    g++ -Werror -Weffc++ -Wextra -Wall -Wconversion -Wshadow -Wpedantic -Wold-style-cast -Wsign-promo -Wzero-as-null-pointer-constant -Wsuggest-override -Wnon-virtual-dtor \
        -Wcast-align -Woverloaded-virtual -Wunused -pedantic -Wsign-conversion -Wmisleading-indentation -Wnull-dereference -Wdouble-promotion -Wformat=2 -Wimplicit-fallthrough \
        -Wuseless-cast -Wsuggest-final-types -Wsuggest-final-methods -Wduplicated-cond -Wduplicated-branches -Wlogical-op -std=gnuc++23 \
        main.cpp <OTHER>.cpp -o <A.OUT>

    SYMBOL    MEANING // for debugging purposes
    TODO:     the principal programmer needs todo.
    TODO?:	  the principal programmer is not sure about something, that should be addressed.
    TODO?:X   the X programmer is not sure about something, that should be addressed.
    TODO??:   is a question for verbal discussion at CppMSG.com meetup meetings.

    Ordering of headers as follows: re:Lakos
    + The prototype/interface header for this implementation (ie, the .h/.hh file that corresponds to this .cpp/.cc file).
    + Other headers from the same project, as needed.
    + Headers from other non-standard, non-system libraries (for example, Qt, Eigen, etc).
    + Headers from other "almost-standard" libraries (for example, Boost)
    + Standard C++ headers (for example, iostream, functional, etc.)
    + Standard C headers (for example, cstdint, dirent.h, etc.)

    define NDEBUG if asserts are NOT to be checked.  Put in *.h file not *.CPP
    #define NDEBUG
    define GR_DEBUG if we/programmer is Debugging.  Put in *.h file not *.CPP
    #define GR_DEBUG
    #ifdef GR_DEBUG
    #endif GR_DEBUG
 */
//#include <counter.hpp>
//#include "global_entities.h"
#include <cmath>
#include <gsl/gsl> // sudo dnf install  guidelines-support-library-devel
#include <boost/dynamic_bitset.hpp>
#include <boost/multiprecision/cpp_int.hpp>
//#include <bits/stdc++.h>
#include <bitset>
#include <bit>
#include <cassert>
#include <chrono>
#include <climits>
#include <csignal>
#include <cstddef>
#include <iostream>
#include <optional>
#include <stdfloat>
#include <string>
#include <string_view>
#include <source_location>
#include <stacktrace>
#include <vector>

using std::cin; using std::cout; using std::cerr; using std::clog; using std::endl; using std::string;  // using namespace std;
using namespace std::string_literals;
using namespace std::chrono_literals;

static_assert(CHAR_MIN < 0, "Char is signed.");
//static_assert(CHAR_MIN == 0, "Char is unsigned.");
#if CHAR_MIN < 0
    #pragma message("$$ Char is signed.")
#else
    #pragma message("$$ Char is unsigned.")
#endif
static_assert(std::endian::native == std::endian::little, "Memory is little endian.");
//static_assert(std::endian::native == std::endian::big,    "Memory is big endian.");
#pragma message("$$ Memory is little endian.")
#pragma message("$$ Twos Complement integer math most common, and C++ standard required since C++20.")
using Ostring       = std::optional<std::string>;
using Ochar         = std::optional<char>;
using Ointegral     = std::optional<long>;
//inline constexpr char           CHAR_NULL{'\o{177}'};        // Value is unset/not-set, similar to how a SQL DB shows an unset field as NULL, which is different than zero length or some magic number.  Here we turn it into a magic number and hope for the best.
inline constexpr char           CHAR_NULL{CHAR_MIN};        // Value is unset/not-set, similar to how a SQL DB shows an unset field as NULL, which is different than zero length or some magic number.  Here we turn it into a magic number and hope for the best.
inline constexpr signed char    SCHAR_NULL{SCHAR_MIN};       // Value is unset/not-set, similar to how a SQL DB shows an unset field as NULL, which is different than zero length or some magic number.  Here we turn it into a magic number and hope for the best.
inline constexpr unsigned char  UCHAR_NULL{UCHAR_MAX};       // Value is unset/not-set, similar to how a SQL DB shows an unset field as NULL, which is different than zero length or some magic number.  Here we turn it into a magic number and hope for the best.
inline constexpr std::string    STRING_NULL{"NULL"};    // Value is unset/not-set, similar to how a SQL DB shows an unset field as NULL, which is different than zero length or some magic number.  Here we turn it into a magic number and hope for the best.

 // Some crude logging that prints source location, where X prints a variable, and R adds \n\r (which is usefull when tty in in RAW or CBREAK mode. Requires C++20.
#define LOGGER_(  msg )  using loc = std::source_location;std::cout.flush();std::cerr.flush();std::cerr<<    "["<<loc::current().file_name()<<':'<<std::setw(4)<<loc::current().line()<<','<<std::setw(3)<<loc::current().column()<<"]`"<<loc::current().function_name()<<"`:" <<#msg<<           "."    <<endl;cout.flush();cerr.flush();
#define LOGGER_R( msg )  using loc = std::source_location;std::cout.flush();std::cerr.flush();std::cerr<<"\r\n["<<loc::current().file_name()<<':'<<std::setw(4)<<loc::current().line()<<','<<std::setw(3)<<loc::current().column()<<"]`"<<loc::current().function_name()<<"`:" <<#msg<<           ".\r\n"<<endl;cout.flush();cerr.flush();
#define LOGGERX(  msg, x)using loc = std::source_location;std::cout.flush();std::cerr.flush();std::cerr<<    "["<<loc::current().file_name()<<':'<<std::setw(4)<<loc::current().line()<<','<<std::setw(3)<<loc::current().column()<<"]`"<<loc::current().function_name()<<"`:" <<#msg<<".:{"<<x<<"}."    <<endl;cout.flush();cerr.flush();
#define LOGGERXR( msg, x)using loc = std::source_location;std::cout.flush();std::cerr.flush();std::cerr<<"\r\n["<<loc::current().file_name()<<':'<<std::setw(4)<<loc::current().line()<<','<<std::setw(3)<<loc::current().column()<<"]`"<<loc::current().function_name()<<"`:" <<#msg<<".:{"<<x<<"}.\r\n"<<endl;cout.flush();cerr.flush();

template<class... Ts> struct overloaded : Ts... { using Ts::operator()...; };

/** Requires that a type has insertion operator
    Concept definition - used by a template below.
    Some value needs to be incorporated with above text:
///  Concept using Function Explicit instantiations that are required to generate code for linker.
///  TODO??: is the only used if definition is in *.cpp file?
///  https://isocpp.org/wiki/faq/templates#templates-defn-vs-decl
///  https://stackoverflow.com/questions/495021/why-can-templates-only-be-implemented-in-the-header-file
//template std::ostream & operator<<( std::ostream & , std::vector<std::string> const & );
/// Concept using Function Explicit instantiations that are required to generate code for linker.
//template std::ostream & operator<<( std::ostream & , std::deque<int>          const & );
*/
template <typename Container>
concept Insertable = requires( std::ostream & out ) {
    requires not std::same_as<std::string, Container>;                                    // OR $ std::is_same <std::string, Container>::value OR std::is_same_v<std::string, Container>;
    requires not std::same_as<std::string_view, Container>;                                    // OR $ std::is_same <std::string, Container>::value OR std::is_same_v<std::string, Container>;
    { out << typename Container::value_type {} } -> std::convertible_to<std::ostream & >; // OR just $ { out << typename Container::value_type {} };
};

/** Prints contents of a container such as a vector of int's.
    Insertable Concept used by Templated Function definition
    Older version is here for the record:
    template<typename T> std::ostream & operator<<(std::ostream & out, std::vector<T> const & v) { // utility f() to print vectors
    if ( not v.empty() ) {
        out<<'['; std::copy(v.begin(), v.end(), std::ostream_iterator<T>(out, ", ")); out<<"\b\b]";
    }
        return out;
    }
*/
template<typename Container>                        //template<insertable Container>        // OR these 2 lines currently being used.
    requires Insertable<Container>
std::ostream &
operator<<( std::ostream & out, Container const & c) {
    if ( not c.empty()) {
        out << "[<";   //out.width(9);  // TODO??: neither work, only space out first element. //out << std::setw(9);  // TODO??: neither work, only space out first element.
        std::copy(c.begin(), c.end(), std::ostream_iterator< typename Container::value_type >( out, ">,<" ));
        //cout << "\b\b\b>]"; out.width(); out << std::setw(0);
        out << "\b\b\b>]"; out.width(); out << std::setw(0) << " ";
    } else out << "[CONTAINTER IS EMPTY]";
    return out;
}

namespace Detail {  // NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
std::string source_loc();           // forward declaration
//extern void stacktrace_register();
void crash_signals_register();

/** gives a source location for printing.  Used for debugging. */
std::string
source_loc() {
    using loc = std::source_location;
    //using ts = std::to_string;  // todo??: why not?  alternative approach?
    std::string result {"\n"s+loc::current().file_name() +":"s +std::to_string(loc::current().line()) +std::to_string(loc::current().column())+"]`"s +loc::current().function_name()+"`."s};
    return result;
}

/** Called as we try to ABORT ) after already getting another signal from the application code.
    OR should we exit() or terminate() and not use this function? */
auto crash_tracer_SIGABRT(int signal_number) -> void {
    //LOGGERX( "We are getting out and that generated another signal, presumably ABRT, we got signal number", signal_number);
    //LOGGERX( "IGNORE THIS ONE, just shown for understanding:", std::stacktrace::current());
    LOGGER_( "This is the very end!");
    return;
}

/** Prints a stacktrace of crash location.  Used for debugging. */
auto crash_tracer(int signal_number) -> void {
    cerr << "\n\r:CRASH_ERROR:Got signal number:" << signal_number;
    cerr << "\n\r:./stack_trace::current():" << std::stacktrace::current() <<":END CRASH_ERROR STACK_TRACE."<<endl;

    if ( bool is_want_prompt{true}; is_want_prompt ) {
        std::string reply; cout << "CRASH_ERROR: q for exit(1) or CR to continue:"; cout.flush(); cin.clear();
        getline( cin, reply );
        if ( reply == "q" )
            exit(1);
        else
            return;
    }
    else {
        /* IGNORE using namespace std::chrono_literals;
    std::chrono::duration my_duration = 2s;
    cerr << "Wait time:" << 2s << " + in variable:"<< my_duration <<endl;
    std::this_thread::sleep_for( my_duration ); // sleep(2);  // seconds
    std::this_thread::sleep_for( std::chrono_literals::s::1 ); //todo??: how to do this?
    LOGGER_LOC( my_tracer(): Now- after stacktrace documenting a catastrophic error- we need to abort().);
    */

        //std::signal( SIGABRT, SIG_DFL ); // repair normal signals in preparation for abort() // OR maybe?? $ std::signal( SIGABRT, SIG_IGN );
        std::abort(); // OR alternatively? $ std::exit(42) or teminate, or quick_exit()??
        // *** we never get here
        assert( false && "Doing something after std::abort() is ERROR.\n" );
        return;
    }
}
/** signals that cause "terminate" and sometimes "core dump"  https://en.wikipedia.org/wiki/Signal_(IPC)
   We define here all the signal names listed in POSIX (1003.1-2008);
   as of 1003.1-2013, no additional signals have been added by POSIX.
   We also define here signal names that historically exist in every
   real-world POSIX variant (e.g. SIGWINCH).
   Signals in the 1-15 range are defined with their historical numbers.
   For other signals, we use the BSD numbers.
   There are two unallocated signal numbers in the 1-31 range: 7 and 29.
   Signal number 0 is reserved for use as kill(pid, 0), to test whether
   a process exists without sending it a signal.
 ISO C99 signals.
#define	SIGINT		2	 Interactive attention signal.
#define	SIGILL		4	 Illegal instruction.
#define	SIGABRT		6	 Abnormal termination.
#define	SIGFPE		8	 Erroneous arithmetic operation.
#define	SIGSEGV		11	 Invalid access to storage.
#define	SIGTERM		15	 Termination request.
 Historical signals specified by POSIX.
#define	SIGHUP		1	 Hangup.
#define	SIGQUIT		3	 Quit.
#define	SIGTRAP		5	 Trace/breakpoint trap.
#define	SIGKILL		9	 Killed.
#define	SIGPIPE		13	 Broken pipe.
#define	SIGALRM		14	 Alarm clock.
 Adjustments and additions to the signal number constants for most Linux systems.
#define SIGSTKFLT	16	 Stack fault (obsolete).
#define SIGPWR		30	 Power failure imminent.
 Historical signals specified by POSIX.
#define SIGBUS		 7	 Bus error.
#define SIGSYS		31	 Bad system call.
 New(er) POSIX signals (1003.1-2008, 1003.1-2013).
#define SIGURG		23	 Urgent data is available at a socket.
#define SIGSTOP		19	 Stop, unblockable.
#define SIGTSTP		20	 Keyboard stop.
#define SIGCONT		18	 Continue.
#define SIGCHLD		17	 Child terminated or stopped.
#define SIGTTIN		21	 Background read from control terminal.
#define SIGTTOU		22	 Background write to control terminal.
#define SIGPOLL		29	 Pollable event occurred (System V).
#define SIGXFSZ		25	 File size limit exceeded.
#define SIGXCPU		24	 CPU time limit exceeded.
#define SIGVTALRM	26	 Virtual timer expired.
#define SIGPROF		27	 Profiling timer expired.
#define SIGUSR1		10	 User-defined signal 1.
#define SIGUSR2		12	 User-defined signal 2.
 Nonstandard signals found in all modern POSIX systems
   (including both BSD and Linux).
#define SIGWINCH	28	 Window size change (4.3 BSD, Sun).
 Archaic names for compatibility.
#define SIGIO		SIGPOLL	 I/O now possible (4.2 BSD).
#define SIGIOT		SIGABRT	 IOT instruction, abort() on a PDP-11.
#define SIGCLD		SIGCHLD	 Old System V name
#define __SIGRTMIN	32
#define __SIGRTMAX	64
*/
auto crash_signals_register() -> void {
    std::signal( SIGHUP,  crash_tracer );
    std::signal( SIGINT,  crash_tracer );
    std::signal( SIGQUIT, crash_tracer );
    std::signal( SIGILL,  crash_tracer );
    std::signal( SIGTRAP, crash_tracer );
    std::signal( SIGABRT, crash_tracer_SIGABRT );
    std::signal( SIGSEGV, crash_tracer );
}
} // End Namespace NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN

// ++++++++++++++++ EXAMPLEs begin ++++++++++++++++++++++++++++++++++++++++++++++++++++++++
const std::array<std::string, 3000> DICTIONARY_WORDS
    { "a",
      "abandon",
      "ability",
      "able",
      "abortion",
      "about",
      "above",
      "abroad",
      "absence",
      "absolute",
      "absolutely",
      "absorb",
      "abuse",
      "academic",
      "accept",
      "access",
      "accident",
      "accompany",
      "accomplish",
      "according",
      "account",
      "accurate",
      "accuse",
      "achieve",
      "achievement",
      "acid",
      "acknowledge",
      "acquire",
      "across",
      "act",
      "action",
      "active",
      "activist",
      "activity",
      "actor",
      "actress",
      "actual",
      "actually",
      "ad",
      "adapt",
      "add",
      "addition",
      "additional",
      "address",
      "adequate",
      "adjust",
      "adjustment",
      "administration",
      "administrator",
      "admire",
      "admission",
      "admit",
      "adolescent",
      "adopt",
      "adult",
      "advance",
      "advanced",
      "advantage",
      "adventure",
      "advertising",
      "advice",
      "advise",
      "adviser",
      "advocate",
      "affair",
      "affect",
      "afford",
      "afraid",
      "African",
      "African-American",
      "after",
      "afternoon",
      "again",
      "against",
      "age",
      "agency",
      "agenda",
      "agent",
      "aggressive",
      "ago",
      "agree",
      "agreement",
      "agricultural",
      "ah",
      "ahead",
      "aid",
      "aide",
      "AIDS",
      "aim",
      "air",
      "aircraft",
      "airline",
      "airport",
      "album",
      "alcohol",
      "alive",
      "all",
      "alliance",
      "allow",
      "ally",
      "almost",
      "alone",
      "along",
      "already",
      "also",
      "alter",
      "alternative",
      "although",
      "always",
      "AM",
      "amazing",
      "American",
      "among",
      "amount",
      "analysis",
      "analyst",
      "analyze",
      "ancient",
      "and",
      "anger",
      "angle",
      "angry",
      "animal",
      "anniversary",
      "announce",
      "annual",
      "another",
      "answer",
      "anticipate",
      "anxiety",
      "any",
      "anybody",
      "anymore",
      "anyone",
      "anything",
      "anyway",
      "anywhere",
      "apart",
      "apartment",
      "apparent",
      "apparently",
      "appeal",
      "appear",
      "appearance",
      "apple",
      "application",
      "apply",
      "appoint",
      "appointment",
      "appreciate",
      "approach",
      "appropriate",
      "approval",
      "approve",
      "approximately",
      "Arab",
      "architect",
      "area",
      "argue",
      "argument",
      "arise",
      "arm",
      "armed",
      "army",
      "around",
      "arrange",
      "arrangement",
      "arrest",
      "arrival",
      "arrive",
      "art",
      "article",
      "artist",
      "artistic",
      "as",
      "Asian",
      "aside",
      "ask",
      "asleep",
      "aspect",
      "assault",
      "assert",
      "assess",
      "assessment",
      "asset",
      "assign",
      "assignment",
      "assist",
      "assistance",
      "assistant",
      "associate",
      "association",
      "assume",
      "assumption",
      "assure",
      "at",
      "athlete",
      "athletic",
      "atmosphere",
      "attach",
      "attack",
      "attempt",
      "attend",
      "attention",
      "attitude",
      "attorney",
      "attract",
      "attractive",
      "attribute",
      "audience",
      "author",
      "authority",
      "auto",
      "available",
      "average",
      "avoid",
      "award",
      "aware",
      "awareness",
      "away",
      "awful",
      "baby",
      "back",
      "background",
      "bad",
      "badly",
      "bag",
      "bake",
      "balance",
      "ball",
      "ban",
      "band",
      "bank",
      "bar",
      "barely",
      "barrel",
      "barrier",
      "base",
      "baseball",
      "basic",
      "basically",
      "basis",
      "basket",
      "basketball",
      "bathroom",
      "battery",
      "battle",
      "be",
      "beach",
      "bean",
      "bear",
      "beat",
      "beautiful",
      "beauty",
      "because",
      "become",
      "bed",
      "bedroom",
      "beer",
      "before",
      "begin",
      "beginning",
      "behavior",
      "behind",
      "being",
      "belief",
      "believe",
      "bell",
      "belong",
      "below",
      "belt",
      "bench",
      "bend",
      "beneath",
      "benefit",
      "beside",
      "besides",
      "best",
      "bet",
      "better",
      "between",
      "beyond",
      "Bible",
      "big",
      "bike",
      "bill",
      "billion",
      "bind",
      "biological",
      "bird",
      "birth",
      "birthday",
      "bit",
      "bite",
      "black",
      "blade",
      "blame",
      "blanket",
      "blind",
      "block",
      "blood",
      "blow",
      "blue",
      "board",
      "boat",
      "body",
      "bomb",
      "bombing",
      "bond",
      "bone",
      "book",
      "boom",
      "boot",
      "border",
      "born",
      "borrow",
      "boss",
      "both",
      "bother",
      "bottle",
      "bottom",
      "boundary",
      "bowl",
      "box",
      "boy",
      "boyfriend",
      "brain",
      "branch",
      "brand",
      "bread",
      "break",
      "breakfast",
      "breast",
      "breath",
      "breathe",
      "brick",
      "bridge",
      "brief",
      "briefly",
      "bright",
      "brilliant",
      "bring",
      "British",
      "broad",
      "broken",
      "brother",
      "brown",
      "brush",
      "buck",
      "budget",
      "build",
      "building",
      "bullet",
      "bunch",
      "burden",
      "burn",
      "bury",
      "bus",
      "business",
      "busy",
      "but",
      "butter",
      "button",
      "buy",
      "buyer",
      "by",
      "cabin",
      "cabinet",
      "cable",
      "cake",
      "calculate",
      "call",
      "camera",
      "camp",
      "campaign",
      "campus",
      "can",
      "Canadian",
      "cancer",
      "candidate",
      "cap",
      "capability",
      "capable",
      "capacity",
      "capital",
      "captain",
      "capture",
      "car",
      "carbon",
      "card",
      "care",
      "career",
      "careful",
      "carefully",
      "carrier",
      "carry",
      "case",
      "cash",
      "cast",
      "cat",
      "catch",
      "category",
      "Catholic",
      "cause",
      "ceiling",
      "celebrate",
      "celebration",
      "celebrity",
      "cell",
      "center",
      "central",
      "century",
      "CEO",
      "ceremony",
      "certain",
      "certainly",
      "chain",
      "chair",
      "chairman",
      "challenge",
      "chamber",
      "champion",
      "championship",
      "chance",
      "change",
      "changing",
      "channel",
      "chapter",
      "character",
      "characteristic",
      "characterize",
      "charge",
      "charity",
      "chart",
      "chase",
      "cheap",
      "check",
      "cheek",
      "cheese",
      "chef",
      "chemical",
      "chest",
      "chicken",
      "chief",
      "child",
      "childhood",
      "Chinese",
      "chip",
      "chocolate",
      "choice",
      "cholesterol",
      "choose",
      "Christian",
      "Christmas",
      "church",
      "cigarette",
      "circle",
      "circumstance",
      "cite",
      "citizen",
      "city",
      "civil",
      "civilian",
      "claim",
      "class",
      "classic",
      "classroom",
      "clean",
      "clear",
      "clearly",
      "client",
      "climate",
      "climb",
      "clinic",
      "clinical",
      "clock",
      "close",
      "closely",
      "closer",
      "clothes",
      "clothing",
      "cloud",
      "club",
      "clue",
      "cluster",
      "coach",
      "coal",
      "coalition",
      "coast",
      "coat",
      "code",
      "coffee",
      "cognitive",
      "cold",
      "collapse",
      "colleague",
      "collect",
      "collection",
      "collective",
      "college",
      "colonial",
      "color",
      "column",
      "combination",
      "combine",
      "come",
      "comedy",
      "comfort",
      "comfortable",
      "command",
      "commander",
      "comment",
      "commercial",
      "commission",
      "commit",
      "commitment",
      "committee",
      "common",
      "communicate",
      "communication",
      "community",
      "company",
      "compare",
      "comparison",
      "compete",
      "competition",
      "competitive",
      "competitor",
      "complain",
      "complaint",
      "complete",
      "completely",
      "complex",
      "complicated",
      "component",
      "compose",
      "composition",
      "comprehensive",
      "computer",
      "concentrate",
      "concentration",
      "concept",
      "concern",
      "concerned",
      "concert",
      "conclude",
      "conclusion",
      "concrete",
      "condition",
      "conduct",
      "conference",
      "confidence",
      "confident",
      "confirm",
      "conflict",
      "confront",
      "confusion",
      "Congress",
      "congressional",
      "connect",
      "connection",
      "consciousness",
      "consensus",
      "consequence",
      "conservative",
      "consider",
      "considerable",
      "consideration",
      "consist",
      "consistent",
      "constant",
      "constantly",
      "constitute",
      "constitutional",
      "construct",
      "construction",
      "consultant",
      "consume",
      "consumer",
      "consumption",
      "contact",
      "contain",
      "container",
      "contemporary",
      "content",
      "contest",
      "context",
      "continue",
      "continued",
      "contract",
      "contrast",
      "contribute",
      "contribution",
      "control",
      "controversial",
      "controversy",
      "convention",
      "conventional",
      "conversation",
      "convert",
      "conviction",
      "convince",
      "cook",
      "cookie",
      "cooking",
      "cool",
      "cooperation",
      "cop",
      "cope",
      "copy",
      "core",
      "corn",
      "corner",
      "corporate",
      "corporation",
      "correct",
      "correspondent",
      "cost",
      "cotton",
      "couch",
      "could",
      "council",
      "counselor",
      "count",
      "counter",
      "country",
      "county",
      "couple",
      "courage",
      "course",
      "court",
      "cousin",
      "cover",
      "coverage",
      "cow",
      "crack",
      "craft",
      "crash",
      "crazy",
      "cream",
      "create",
      "creation",
      "creative",
      "creature",
      "credit",
      "crew",
      "crime",
      "criminal",
      "crisis",
      "criteria",
      "critic",
      "critical",
      "criticism",
      "criticize",
      "crop",
      "cross",
      "crowd",
      "crucial",
      "cry",
      "cultural",
      "culture",
      "cup",
      "curious",
      "current",
      "currently",
      "curriculum",
      "custom",
      "customer",
      "cut",
      "cycle",
      "dad",
      "daily",
      "damage",
      "dance",
      "danger",
      "dangerous",
      "dare",
      "dark",
      "darkness",
      "data",
      "date",
      "daughter",
      "day",
      "dead",
      "deal",
      "dealer",
      "dear",
      "death",
      "debate",
      "debt",
      "decade",
      "decide",
      "decision",
      "deck",
      "declare",
      "decline",
      "decrease",
      "deep",
      "deeply",
      "deer",
      "defeat",
      "defend",
      "defendant",
      "defense",
      "defensive",
      "deficit",
      "define",
      "definitely",
      "definition",
      "degree",
      "delay",
      "deliver",
      "delivery",
      "demand",
      "democracy",
      "Democrat",
      "democratic",
      "demonstrate",
      "demonstration",
      "deny",
      "department",
      "depend",
      "dependent",
      "depending",
      "depict",
      "depression",
      "depth",
      "deputy",
      "derive",
      "describe",
      "description",
      "desert",
      "deserve",
      "design",
      "designer",
      "desire",
      "desk",
      "desperate",
      "despite",
      "destroy",
      "destruction",
      "detail",
      "detailed",
      "detect",
      "determine",
      "develop",
      "developing",
      "development",
      "device",
      "devote",
      "dialogue",
      "die",
      "diet",
      "differ",
      "difference",
      "different",
      "differently",
      "difficult",
      "difficulty",
      "dig",
      "digital",
      "dimension",
      "dining",
      "dinner",
      "direct",
      "direction",
      "directly",
      "director",
      "dirt",
      "dirty",
      "disability",
      "disagree",
      "disappear",
      "disaster",
      "discipline",
      "discourse",
      "discover",
      "discovery",
      "discrimination",
      "discuss",
      "discussion",
      "disease",
      "dish",
      "dismiss",
      "disorder",
      "display",
      "dispute",
      "distance",
      "distant",
      "distinct",
      "distinction",
      "distinguish",
      "distribute",
      "distribution",
      "district",
      "diverse",
      "diversity",
      "divide",
      "division",
      "divorce",
      "DNA",
      "do",
      "doctor",
      "document",
      "dog",
      "domestic",
      "dominant",
      "dominate",
      "door",
      "double",
      "doubt",
      "down",
      "downtown",
      "dozen",
      "draft",
      "drag",
      "drama",
      "dramatic",
      "dramatically",
      "draw",
      "drawing",
      "dream",
      "dress",
      "drink",
      "drive",
      "driver",
      "drop",
      "drug",
      "dry",
      "due",
      "during",
      "dust",
      "duty",
      "each",
      "eager",
      "ear",
      "early",
      "earn",
      "earnings",
      "earth",
      "ease",
      "easily",
      "east",
      "eastern",
      "easy",
      "eat",
      "economic",
      "economics",
      "economist",
      "economy",
      "edge",
      "edition",
      "editor",
      "educate",
      "education",
      "educational",
      "educator",
      "effect",
      "effective",
      "effectively",
      "efficiency",
      "efficient",
      "effort",
      "egg",
      "eight",
      "either",
      "elderly",
      "elect",
      "election",
      "electric",
      "electricity",
      "electronic",
      "element",
      "elementary",
      "eliminate",
      "elite",
      "else",
      "elsewhere",
      "e-mail",
      "embrace",
      "emerge",
      "emergency",
      "emission",
      "emotion",
      "emotional",
      "emphasis",
      "emphasize",
      "employ",
      "employee",
      "employer",
      "employment",
      "empty",
      "enable",
      "encounter",
      "encourage",
      "end",
      "enemy",
      "energy",
      "enforcement",
      "engage",
      "engine",
      "engineer",
      "engineering",
      "English",
      "enhance",
      "enjoy",
      "enormous",
      "enough",
      "ensure",
      "enter",
      "enterprise",
      "entertainment",
      "entire",
      "entirely",
      "entrance",
      "entry",
      "environment",
      "environmental",
      "episode",
      "equal",
      "equally",
      "equipment",
      "era",
      "error",
      "escape",
      "especially",
      "essay",
      "essential",
      "essentially",
      "establish",
      "establishment",
      "estate",
      "estimate",
      "etc",
      "ethics",
      "ethnic",
      "European",
      "evaluate",
      "evaluation",
      "even",
      "evening",
      "event",
      "eventually",
      "ever",
      "every",
      "everybody",
      "everyday",
      "everyone",
      "everything",
      "everywhere",
      "evidence",
      "evolution",
      "evolve",
      "exact",
      "exactly",
      "examination",
      "examine",
      "example",
      "exceed",
      "excellent",
      "except",
      "exception",
      "exchange",
      "exciting",
      "executive",
      "exercise",
      "exhibit",
      "exhibition",
      "exist",
      "existence",
      "existing",
      "expand",
      "expansion",
      "expect",
      "expectation",
      "expense",
      "expensive",
      "experience",
      "experiment",
      "expert",
      "explain",
      "explanation",
      "explode",
      "explore",
      "explosion",
      "expose",
      "exposure",
      "express",
      "expression",
      "extend",
      "extension",
      "extensive",
      "extent",
      "external",
      "extra",
      "extraordinary",
      "extreme",
      "extremely",
      "eye",
      "fabric",
      "face",
      "facility",
      "fact",
      "factor",
      "factory",
      "faculty",
      "fade",
      "fail",
      "failure",
      "fair",
      "fairly",
      "faith",
      "fall",
      "false",
      "familiar",
      "family",
      "famous",
      "fan",
      "fantasy",
      "far",
      "farm",
      "farmer",
      "fashion",
      "fast",
      "fat",
      "fate",
      "father",
      "fault",
      "favor",
      "favorite",
      "fear",
      "feature",
      "federal",
      "fee",
      "feed",
      "feel",
      "feeling",
      "fellow",
      "female",
      "fence",
      "few",
      "fewer",
      "fiber",
      "fiction",
      "field",
      "fifteen",
      "fifth",
      "fifty",
      "fight",
      "fighter",
      "fighting",
      "figure",
      "file",
      "fill",
      "film",
      "final",
      "finally",
      "finance",
      "financial",
      "find",
      "finding",
      "fine",
      "finger",
      "finish",
      "fire",
      "firm",
      "first",
      "fish",
      "fishing",
      "fit",
      "fitness",
      "five",
      "fix",
      "flag",
      "flame",
      "flat",
      "flavor",
      "flee",
      "flesh",
      "flight",
      "float",
      "floor",
      "flow",
      "flower",
      "fly",
      "focus",
      "folk",
      "follow",
      "following",
      "food",
      "foot",
      "football",
      "for",
      "force",
      "foreign",
      "forest",
      "forever",
      "forget",
      "form",
      "formal",
      "formation",
      "former",
      "formula",
      "forth",
      "fortune",
      "forward",
      "found",
      "foundation",
      "founder",
      "four",
      "fourth",
      "frame",
      "framework",
      "free",
      "freedom",
      "freeze",
      "French",
      "frequency",
      "frequent",
      "frequently",
      "fresh",
      "friend",
      "friendly",
      "friendship",
      "from",
      "front",
      "fruit",
      "frustration",
      "fuel",
      "full",
      "fully",
      "fun",
      "function",
      "fund",
      "fundamental",
      "funding",
      "funeral",
      "funny",
      "furniture",
      "furthermore",
      "future",
      "gain",
      "galaxy",
      "gallery",
      "game",
      "gang",
      "gap",
      "garage",
      "garden",
      "garlic",
      "gas",
      "gate",
      "gather",
      "gay",
      "gaze",
      "gear",
      "gender",
      "gene",
      "general",
      "generally",
      "generate",
      "generation",
      "genetic",
      "gentleman",
      "gently",
      "German",
      "gesture",
      "get",
      "ghost",
      "giant",
      "gift",
      "gifted",
      "girl",
      "girlfriend",
      "give",
      "given",
      "glad",
      "glance",
      "glass",
      "global",
      "glove",
      "go",
      "goal",
      "God",
      "gold",
      "golden",
      "golf",
      "good",
      "government",
      "governor",
      "grab",
      "grade",
      "gradually",
      "graduate",
      "grain",
      "grand",
      "grandfather",
      "grandmother",
      "grant",
      "grass",
      "grave",
      "gray",
      "great",
      "greatest",
      "green",
      "grocery",
      "ground",
      "group",
      "grow",
      "growing",
      "growth",
      "guarantee",
      "guard",
      "guess",
      "guest",
      "guide",
      "guideline",
      "guilty",
      "gun",
      "guy",
      "habit",
      "habitat",
      "hair",
      "half",
      "hall",
      "hand",
      "handful",
      "handle",
      "hang",
      "happen",
      "happy",
      "hard",
      "hardly",
      "hat",
      "hate",
      "have",
      "he",
      "head",
      "headline",
      "headquarters",
      "health",
      "healthy",
      "hear",
      "hearing",
      "heart",
      "heat",
      "heaven",
      "heavily",
      "heavy",
      "heel",
      "height",
      "helicopter",
      "hell",
      "hello",
      "help",
      "helpful",
      "her",
      "here",
      "heritage",
      "hero",
      "herself",
      "hey",
      "hi",
      "hide",
      "high",
      "highlight",
      "highly",
      "highway",
      "hill",
      "him",
      "himself",
      "hip",
      "hire",
      "his",
      "historian",
      "historic",
      "historical",
      "history",
      "hit",
      "hold",
      "hole",
      "holiday",
      "holy",
      "home",
      "homeless",
      "honest",
      "honey",
      "honor",
      "hope",
      "horizon",
      "horror",
      "horse",
      "hospital",
      "host",
      "hot",
      "hotel",
      "hour",
      "house",
      "household",
      "housing",
      "how",
      "however",
      "huge",
      "human",
      "humor",
      "hundred",
      "hungry",
      "hunter",
      "hunting",
      "hurt",
      "husband",
      "hypothesis",
      "I",
      "ice",
      "idea",
      "ideal",
      "identification",
      "identify",
      "identity",
      "ie",
      "if",
      "ignore",
      "ill",
      "illegal",
      "illness",
      "illustrate",
      "image",
      "imagination",
      "imagine",
      "immediate",
      "immediately",
      "immigrant",
      "immigration",
      "impact",
      "implement",
      "implication",
      "imply",
      "importance",
      "important",
      "impose",
      "impossible",
      "impress",
      "impression",
      "impressive",
      "improve",
      "improvement",
      "in",
      "incentive",
      "incident",
      "include",
      "including",
      "income",
      "incorporate",
      "increase",
      "increased",
      "increasing",
      "increasingly",
      "incredible",
      "indeed",
      "independence",
      "independent",
      "index",
      "Indian",
      "indicate",
      "indication",
      "individual",
      "industrial",
      "industry",
      "infant",
      "infection",
      "inflation",
      "influence",
      "inform",
      "information",
      "ingredient",
      "initial",
      "initially",
      "initiative",
      "injury",
      "inner",
      "innocent",
      "inquiry",
      "inside",
      "insight",
      "insist",
      "inspire",
      "install",
      "instance",
      "instead",
      "institution",
      "institutional",
      "instruction",
      "instructor",
      "instrument",
      "insurance",
      "intellectual",
      "intelligence",
      "intend",
      "intense",
      "intensity",
      "intention",
      "interaction",
      "interest",
      "interested",
      "interesting",
      "internal",
      "international",
      "Internet",
      "interpret",
      "interpretation",
      "intervention",
      "interview",
      "into",
      "introduce",
      "introduction",
      "invasion",
      "invest",
      "investigate",
      "investigation",
      "investigator",
      "investment",
      "investor",
      "invite",
      "involve",
      "involved",
      "involvement",
      "Iraqi",
      "Irish",
      "iron",
      "Islamic",
      "island",
      "Israeli",
      "issue",
      "it",
      "Italian",
      "item",
      "its",
      "itself",
      "jacket",
      "jail",
      "Japanese",
      "jet",
      "Jew",
      "Jewish",
      "job",
      "join",
      "joint",
      "joke",
      "journal",
      "journalist",
      "journey",
      "joy",
      "judge",
      "judgment",
      "juice",
      "jump",
      "junior",
      "jury",
      "just",
      "justice",
      "justify",
      "keep",
      "key",
      "kick",
      "kid",
      "kill",
      "killer",
      "killing",
      "kind",
      "king",
      "kiss",
      "kitchen",
      "knee",
      "knife",
      "knock",
      "know",
      "knowledge",
      "lab",
      "label",
      "labor",
      "laboratory",
      "lack",
      "lady",
      "lake",
      "land",
      "landscape",
      "language",
      "lap",
      "large",
      "largely",
      "last",
      "late",
      "later",
      "Latin",
      "latter",
      "laugh",
      "launch",
      "law",
      "lawn",
      "lawsuit",
      "lawyer",
      "lay",
      "layer",
      "lead",
      "leader",
      "leadership",
      "leading",
      "leaf",
      "league",
      "lean",
      "learn",
      "learning",
      "least",
      "leather",
      "leave",
      "left",
      "leg",
      "legacy",
      "legal",
      "legend",
      "legislation",
      "legitimate",
      "lemon",
      "length",
      "less",
      "lesson",
      "let",
      "letter",
      "level",
      "liberal",
      "library",
      "license",
      "lie",
      "life",
      "lifestyle",
      "lifetime",
      "lift",
      "light",
      "like",
      "likely",
      "limit",
      "limitation",
      "limited",
      "line",
      "link",
      "lip",
      "list",
      "listen",
      "literally",
      "literary",
      "literature",
      "little",
      "live",
      "living",
      "load",
      "loan",
      "local",
      "locate",
      "location",
      "lock",
      "long",
      "long-term",
      "look",
      "loose",
      "lose",
      "loss",
      "lost",
      "lot",
      "lots",
      "loud",
      "love",
      "lovely",
      "lover",
      "low",
      "lower",
      "luck",
      "lucky",
      "lunch",
      "lung",
      "machine",
      "mad",
      "magazine",
      "mail",
      "main",
      "mainly",
      "maintain",
      "maintenance",
      "major",
      "majority",
      "make",
      "maker",
      "makeup",
      "male",
      "mall",
      "man",
      "manage",
      "management",
      "manager",
      "manner",
      "manufacturer",
      "manufacturing",
      "many",
      "map",
      "margin",
      "mark",
      "market",
      "marketing",
      "marriage",
      "married",
      "marry",
      "mask",
      "mass",
      "massive",
      "master",
      "match",
      "material",
      "math",
      "matter",
      "may",
      "maybe",
      "mayor",
      "me",
      "meal",
      "mean",
      "meaning",
      "meanwhile",
      "measure",
      "measurement",
      "meat",
      "mechanism",
      "media",
      "medical",
      "medication",
      "medicine",
      "medium",
      "meet",
      "meeting",
      "member",
      "membership",
      "memory",
      "mental",
      "mention",
      "menu",
      "mere",
      "merely",
      "mess",
      "message",
      "metal",
      "meter",
      "method",
      "Mexican",
      "middle",
      "might",
      "military",
      "milk",
      "million",
      "mind",
      "mine",
      "minister",
      "minor",
      "minority",
      "minute",
      "miracle",
      "mirror",
      "miss",
      "missile",
      "mission",
      "mistake",
      "mix",
      "mixture",
      "mm-hmm",
      "mode",
      "model",
      "moderate",
      "modern",
      "modest",
      "mom",
      "moment",
      "money",
      "monitor",
      "month",
      "mood",
      "moon",
      "moral",
      "more",
      "moreover",
      "morning",
      "mortgage",
      "most",
      "mostly",
      "mother",
      "motion",
      "motivation",
      "motor",
      "mount",
      "mountain",
      "mouse",
      "mouth",
      "move",
      "movement",
      "movie",
      "Mr",
      "Mrs",
      "Ms",
      "much",
      "multiple",
      "murder",
      "muscle",
      "museum",
      "music",
      "musical",
      "musician",
      "Muslim",
      "must",
      "mutual",
      "my",
      "myself",
      "mystery",
      "myth",
      "naked",
      "name",
      "narrative",
      "narrow",
      "nation",
      "national",
      "native",
      "natural",
      "naturally",
      "nature",
      "near",
      "nearby",
      "nearly",
      "necessarily",
      "necessary",
      "neck",
      "need",
      "negative",
      "negotiate",
      "negotiation",
      "neighbor",
      "neighborhood",
      "neither",
      "nerve",
      "nervous",
      "net",
      "network",
      "never",
      "nevertheless",
      "new",
      "newly",
      "news",
      "newspaper",
      "next",
      "nice",
      "night",
      "nine",
      "no",
      "nobody",
      "nod",
      "noise",
      "nomination",
      "none",
      "nonetheless",
      "nor",
      "normal",
      "normally",
      "north",
      "northern",
      "nose",
      "not",
      "note",
      "nothing",
      "notice",
      "notion",
      "novel",
      "now",
      "nowhere",
      "n't",
      "nuclear",
      "number",
      "numerous",
      "nurse",
      "nut",
      "object",
      "objective",
      "obligation",
      "observation",
      "observe",
      "observer",
      "obtain",
      "obvious",
      "obviously",
      "occasion",
      "occasionally",
      "occupation",
      "occupy",
      "occur",
      "ocean",
      "odd",
      "odds",
      "of",
      "off",
      "offense",
      "offensive",
      "offer",
      "office",
      "officer",
      "official",
      "often",
      "oh",
      "oil",
      "ok",
      "okay",
      "old",
      "Olympic",
      "on",
      "once",
      "one",
      "ongoing",
      "onion",
      "online",
      "only",
      "onto",
      "open",
      "opening",
      "operate",
      "operating",
      "operation",
      "operator",
      "opinion",
      "opponent",
      "opportunity",
      "oppose",
      "opposite",
      "opposition",
      "option",
      "or",
      "orange",
      "order",
      "ordinary",
      "organic",
      "organization",
      "organize",
      "orientation",
      "origin",
      "original",
      "originally",
      "other",
      "others",
      "otherwise",
      "ought",
      "our",
      "ourselves",
      "out",
      "outcome",
      "outside",
      "oven",
      "over",
      "overall",
      "overcome",
      "overlook",
      "owe",
      "own",
      "owner",
      "pace",
      "pack",
      "package",
      "page",
      "pain",
      "painful",
      "paint",
      "painter",
      "painting",
      "pair",
      "pale",
      "Palestinian",
      "palm",
      "pan",
      "panel",
      "pant",
      "paper",
      "parent",
      "park",
      "parking",
      "part",
      "participant",
      "participate",
      "participation",
      "particular",
      "particularly",
      "partly",
      "partner",
      "partnership",
      "party",
      "pass",
      "passage",
      "passenger",
      "passion",
      "past",
      "patch",
      "path",
      "patient",
      "pattern",
      "pause",
      "pay",
      "payment",
      "PC",
      "peace",
      "peak",
      "peer",
      "penalty",
      "people",
      "pepper",
      "per",
      "perceive",
      "percentage",
      "perception",
      "perfect",
      "perfectly",
      "perform",
      "performance",
      "perhaps",
      "period",
      "permanent",
      "permission",
      "permit",
      "person",
      "personal",
      "personality",
      "personally",
      "personnel",
      "perspective",
      "persuade",
      "pet",
      "phase",
      "phenomenon",
      "philosophy",
      "phone",
      "photo",
      "photograph",
      "photographer",
      "phrase",
      "physical",
      "physically",
      "physician",
      "piano",
      "pick",
      "picture",
      "pie",
      "piece",
      "pile",
      "pilot",
      "pine",
      "pink",
      "pipe",
      "pitch",
      "place",
      "plan",
      "plane",
      "planet",
      "planning",
      "plant",
      "plastic",
      "plate",
      "platform",
      "play",
      "player",
      "please",
      "pleasure",
      "plenty",
      "plot",
      "plus",
      "PM",
      "pocket",
      "poem",
      "poet",
      "poetry",
      "point",
      "pole",
      "police",
      "policy",
      "political",
      "politically",
      "politician",
      "politics",
      "poll",
      "pollution",
      "pool",
      "poor",
      "pop",
      "popular",
      "population",
      "porch",
      "port",
      "portion",
      "portrait",
      "portray",
      "pose",
      "position",
      "positive",
      "possess",
      "possibility",
      "possible",
      "possibly",
      "post",
      "pot",
      "potato",
      "potential",
      "potentially",
      "pound",
      "pour",
      "poverty",
      "powder",
      "power",
      "powerful",
      "practical",
      "practice",
      "pray",
      "prayer",
      "precisely",
      "predict",
      "prefer",
      "preference",
      "pregnancy",
      "pregnant",
      "preparation",
      "prepare",
      "prescription",
      "presence",
      "present",
      "presentation",
      "preserve",
      "president",
      "presidential",
      "press",
      "pressure",
      "pretend",
      "pretty",
      "prevent",
      "previous",
      "previously",
      "price",
      "pride",
      "priest",
      "primarily",
      "primary",
      "prime",
      "principal",
      "principle",
      "print",
      "prior",
      "priority",
      "prison",
      "prisoner",
      "privacy",
      "private",
      "probably",
      "problem",
      "procedure",
      "proceed",
      "process",
      "produce",
      "producer",
      "product",
      "production",
      "profession",
      "professional",
      "professor",
      "profile",
      "profit",
      "program",
      "progress",
      "project",
      "prominent",
      "promise",
      "promote",
      "prompt",
      "proof",
      "proper",
      "properly",
      "property",
      "proportion",
      "proposal",
      "propose",
      "proposed",
      "prosecutor",
      "prospect",
      "protect",
      "protection",
      "protein",
      "protest",
      "proud",
      "prove",
      "provide",
      "provider",
      "province",
      "provision",
      "psychological",
      "psychologist",
      "psychology",
      "public",
      "publication",
      "publicly",
      "publish",
      "publisher",
      "pull",
      "punishment",
      "purchase",
      "pure",
      "purpose",
      "pursue",
      "push",
      "put",
      "qualify",
      "quality",
      "quarter",
      "quarterback",
      "question",
      "quick",
      "quickly",
      "quiet",
      "quietly",
      "quit",
      "quite",
      "quote",
      "race",
      "racial",
      "radical",
      "radio",
      "rail",
      "rain",
      "raise",
      "range",
      "rank",
      "rapid",
      "rapidly",
      "rare",
      "rarely",
      "rate",
      "rather",
      "rating",
      "ratio",
      "raw",
      "reach",
      "react",
      "reaction",
      "read",
      "reader",
      "reading",
      "ready",
      "real",
      "reality",
      "realize",
      "really",
      "reason",
      "reasonable",
      "recall",
      "receive",
      "recent",
      "recently",
      "recipe",
      "recognition",
      "recognize",
      "recommend",
      "recommendation",
      "record",
      "recording",
      "recover",
      "recovery",
      "recruit",
      "red",
      "reduce",
      "reduction",
      "refer",
      "reference",
      "reflect",
      "reflection",
      "reform",
      "refugee",
      "refuse",
      "regard",
      "regarding",
      "regardless",
      "regime",
      "region",
      "regional",
      "register",
      "regular",
      "regularly",
      "regulate",
      "regulation",
      "reinforce",
      "reject",
      "relate",
      "relation",
      "relationship",
      "relative",
      "relatively",
      "relax",
      "release",
      "relevant",
      "relief",
      "religion",
      "religious",
      "rely",
      "remain",
      "remaining",
      "remarkable",
      "remember",
      "remind",
      "remote",
      "remove",
      "repeat",
      "repeatedly",
      "replace",
      "reply",
      "report",
      "reporter",
      "represent",
      "representation",
      "representative",
      "Republican",
      "reputation",
      "request",
      "require",
      "requirement",
      "research",
      "researcher",
      "resemble",
      "reservation",
      "resident",
      "resist",
      "resistance",
      "resolution",
      "resolve",
      "resort",
      "resource",
      "respect",
      "respond",
      "respondent",
      "response",
      "responsibility",
      "responsible",
      "rest",
      "restaurant",
      "restore",
      "restriction",
      "result",
      "retain",
      "retire",
      "retirement",
      "return",
      "reveal",
      "revenue",
      "review",
      "revolution",
      "rhythm",
      "rice",
      "rich",
      "rid",
      "ride",
      "rifle",
      "right",
      "ring",
      "rise",
      "risk",
      "river",
      "road",
      "rock",
      "role",
      "roll",
      "romantic",
      "roof",
      "room",
      "root",
      "rope",
      "rose",
      "rough",
      "roughly",
      "round",
      "route",
      "routine",
      "row",
      "rub",
      "rule",
      "run",
      "running",
      "rural",
      "rush",
      "Russian",
      "sacred",
      "sad",
      "safe",
      "safety",
      "sake",
      "salad",
      "salary",
      "sale",
      "sales",
      "salt",
      "same",
      "sample",
      "sanction",
      "sand",
      "satellite",
      "satisfaction",
      "satisfy",
      "sauce",
      "save",
      "saving",
      "say",
      "scale",
      "scandal",
      "scared",
      "scenario",
      "scene",
      "schedule",
      "scheme",
      "scholar",
      "scholarship",
      "school",
      "science",
      "scientific",
      "scientist",
      "scope",
      "score",
      "scream",
      "screen",
      "script",
      "sea",
      "search",
      "season",
      "seat",
      "second",
      "secret",
      "secretary",
      "section",
      "sector",
      "secure",
      "security",
      "see",
      "seed",
      "seek",
      "seem",
      "segment",
      "seize",
      "select",
      "selection",
      "self",
      "sell",
      "Senate",
      "senator",
      "send",
      "senior",
      "sense",
      "sensitive",
      "sentence",
      "separate",
      "sequence",
      "series",
      "serious",
      "seriously",
      "serve",
      "service",
      "session",
      "set",
      "setting",
      "settle",
      "settlement",
      "seven",
      "several",
      "severe",
      "sex",
      "sexual",
      "shade",
      "shadow",
      "shake",
      "shall",
      "shape",
      "share",
      "sharp",
      "she",
      "sheet",
      "shelf",
      "shell",
      "shelter",
      "shift",
      "shine",
      "ship",
      "shirt",
      "shit",
      "shock",
      "shoe",
      "shoot",
      "shooting",
      "shop",
      "shopping",
      "shore",
      "short",
      "shortly",
      "shot",
      "should",
      "shoulder",
      "shout",
      "show",
      "shower",
      "shrug",
      "shut",
      "sick",
      "side",
      "sigh",
      "sight",
      "sign",
      "signal",
      "significance",
      "significant",
      "significantly",
      "silence",
      "silent",
      "silver",
      "similar",
      "similarly",
      "simple",
      "simply",
      "sin",
      "since",
      "sing",
      "singer",
      "single",
      "sink",
      "sir",
      "sister",
      "sit",
      "site",
      "situation",
      "six",
      "size",
      "ski",
      "skill",
      "skin",
      "sky",
      "slave",
      "sleep",
      "slice",
      "slide",
      "slight",
      "slightly",
      "slip",
      "slow",
      "slowly",
      "small",
      "smart",
      "smell",
      "smile",
      "smoke",
      "smooth",
      "snap",
      "snow",
      "so",
      "so-called",
      "soccer",
      "social",
      "society",
      "soft",
      "software",
      "soil",
      "solar",
      "soldier",
      "solid",
      "solution",
      "solve",
      "some",
      "somebody",
      "somehow",
      "someone",
      "something",
      "sometimes",
      "somewhat",
      "somewhere",
      "son",
      "song",
      "soon",
      "sophisticated",
      "sorry",
      "sort",
      "soul",
      "sound",
      "soup",
      "source",
      "south",
      "southern",
      "Soviet",
      "space",
      "Spanish",
      "speak",
      "speaker",
      "special",
      "specialist",
      "species",
      "specific",
      "specifically",
      "speech",
      "speed",
      "spend",
      "spending",
      "spin",
      "spirit",
      "spiritual",
      "split",
      "spokesman",
      "sport",
      "spot",
      "spread",
      "spring",
      "square",
      "squeeze",
      "stability",
      "stable",
      "staff",
      "stage",
      "stair",
      "stake",
      "stand",
      "standard",
      "standing",
      "star",
      "stare",
      "start",
      "state",
      "statement",
      "station",
      "statistics",
      "status",
      "stay",
      "steady",
      "steal",
      "steel",
      "step",
      "stick",
      "still",
      "stir",
      "stock",
      "stomach",
      "stone",
      "stop",
      "storage",
      "store",
      "storm",
      "story",
      "straight",
      "strange",
      "stranger",
      "strategic",
      "strategy",
      "stream",
      "street",
      "strength",
      "strengthen",
      "stress",
      "stretch",
      "strike",
      "string",
      "strip",
      "stroke",
      "strong",
      "strongly",
      "structure",
      "struggle",
      "student",
      "studio",
      "study",
      "stuff",
      "stupid",
      "style",
      "subject",
      "submit",
      "subsequent",
      "substance",
      "substantial",
      "succeed",
      "success",
      "successful",
      "successfully",
      "such",
      "sudden",
      "suddenly",
      "sue",
      "suffer",
      "sufficient",
      "sugar",
      "suggest",
      "suggestion",
      "suicide",
      "suit",
      "summer",
      "summit",
      "sun",
      "super",
      "supply",
      "support",
      "supporter",
      "suppose",
      "supposed",
      "Supreme",
      "sure",
      "surely",
      "surface",
      "surgery",
      "surprise",
      "surprised",
      "surprising",
      "surprisingly",
      "surround",
      "survey",
      "survival",
      "survive",
      "survivor",
      "suspect",
      "sustain",
      "swear",
      "sweep",
      "sweet",
      "swim",
      "swing",
      "switch",
      "symbol",
      "symptom",
      "system",
      "table",
      "tablespoon",
      "tactic",
      "tail",
      "take",
      "tale",
      "talent",
      "talk",
      "tall",
      "tank",
      "tap",
      "tape",
      "target",
      "task",
      "taste",
      "tax",
      "taxpayer",
      "tea",
      "teach",
      "teacher",
      "teaching",
      "team",
      "tear",
      "teaspoon",
      "technical",
      "technique",
      "technology",
      "teen",
      "teenager",
      "telephone",
      "telescope",
      "television",
      "tell",
      "temperature",
      "temporary",
      "ten",
      "tend",
      "tendency",
      "tennis",
      "tension",
      "tent",
      "term",
      "terms",
      "terrible",
      "territory",
      "terror",
      "terrorism",
      "terrorist",
      "test",
      "testify",
      "testimony",
      "testing",
      "text",
      "than",
      "thank",
      "thanks",
      "that",
      "the",
      "theater",
      "their",
      "them",
      "theme",
      "themselves",
      "then",
      "theory",
      "therapy",
      "there",
      "therefore",
      "these",
      "they",
      "thick",
      "thin",
      "thing",
      "think",
      "thinking",
      "third",
      "thirty",
      "this",
      "those",
      "though",
      "thought",
      "thousand",
      "threat",
      "threaten",
      "three",
      "throat",
      "through",
      "throughout",
      "throw",
      "thus",
      "ticket",
      "tie",
      "tight",
      "time",
      "tiny",
      "tip",
      "tire",
      "tired",
      "tissue",
      "title",
      "to",
      "tobacco",
      "today",
      "toe",
      "together",
      "tomato",
      "tomorrow",
      "tone",
      "tongue",
      "tonight",
      "too",
      "tool",
      "tooth",
      "top",
      "topic",
      "toss",
      "total",
      "totally",
      "touch",
      "tough",
      "tour",
      "tourist",
      "tournament",
      "toward",
      "towards",
      "tower",
      "town",
      "toy",
      "trace",
      "track",
      "trade",
      "tradition",
      "traditional",
      "traffic",
      "tragedy",
      "trail",
      "train",
      "training",
      "transfer",
      "transform",
      "transformation",
      "transition",
      "translate",
      "transportation",
      "travel",
      "treat",
      "treatment",
      "treaty",
      "tree",
      "tremendous",
      "trend",
      "trial",
      "tribe",
      "trick",
      "trip",
      "troop",
      "trouble",
      "truck",
      "true",
      "truly",
      "trust",
      "truth",
      "try",
      "tube",
      "tunnel",
      "turn",
      "TV",
      "twelve",
      "twenty",
      "twice",
      "twin",
      "two",
      "type",
      "typical",
      "typically",
      "ugly",
      "ultimate",
      "ultimately",
      "unable",
      "uncle",
      "under",
      "undergo",
      "understand",
      "understanding",
      "unfortunately",
      "uniform",
      "union",
      "unique",
      "unit",
      "United",
      "universal",
      "universe",
      "university",
      "unknown",
      "unless",
      "unlike",
      "unlikely",
      "until",
      "unusual",
      "up",
      "upon",
      "upper",
      "urban",
      "urge",
      "us",
      "use",
      "used",
      "useful",
      "user",
      "usual",
      "usually",
      "utility",
      "vacation",
      "valley",
      "valuable",
      "value",
      "variable",
      "variation",
      "variety",
      "various",
      "vary",
      "vast",
      "vegetable",
      "vehicle",
      "venture",
      "version",
      "versus",
      "very",
      "vessel",
      "veteran",
      "via",
      "victim",
      "victory",
      "video",
      "view",
      "viewer",
      "village",
      "violate",
      "violation",
      "violence",
      "violent",
      "virtually",
      "virtue",
      "virus",
      "visible",
      "vision",
      "visit",
      "visitor",
      "visual",
      "vital",
      "voice",
      "volume",
      "volunteer",
      "vote",
      "voter",
      "vs",
      "vulnerable",
      "wage",
      "wait",
      "wake",
      "walk",
      "wall",
      "wander",
      "want",
      "war",
      "warm",
      "warn",
      "warning",
      "wash",
      "waste",
      "watch",
      "water",
      "wave",
      "way",
      "we",
      "weak",
      "wealth",
      "wealthy",
      "weapon",
      "wear",
      "weather",
      "wedding",
      "week",
      "weekend",
      "weekly",
      "weigh",
      "weight",
      "welcome",
      "welfare",
      "well",
      "west",
      "western",
      "wet",
      "what",
      "whatever",
      "wheel",
      "when",
      "whenever",
      "where",
      "whereas",
      "whether",
      "which",
      "while",
      "whisper",
      "white",
      "who",
      "whole",
      "whom",
      "whose",
      "why",
      "wide",
      "widely",
      "widespread",
      "wife",
      "wild",
      "will",
      "willing",
      "win",
      "wind",
      "window",
      "wine",
      "wing",
      "winner",
      "winter",
      "wipe",
      "wire",
      "wisdom",
      "wise",
      "wish",
      "with",
      "withdraw",
      "within",
      "without",
      "witness",
      "woman",
      "wonder",
      "wonderful",
      "wood",
      "wooden",
      "word",
      "work",
      "worker",
      "working",
      "works",
      "workshop",
      "world",
      "worried",
      "worry",
      "worth",
      "would",
      "wound",
      "wrap",
      "write",
      "writer",
      "writing",
      "wrong",
      "yard",
      "yeah",
      "year",
      "yell",
      "yellow",
      "yes",
      "yesterday",
      "yet",
      "yield",
      "you",
      "young",
      "your",
      "yours",
      "yourself",
      "youth",
      "zone" };
namespace Example1 { // NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
//  std::bitset construction and chunking into 5, 6, 8 bit divided chunks
    /* *** Strange Gen AI answers that don't make sense to me?
template <typename T>  // Gen AI answer
void packBits(const std::vector<T>& data, std::vector<bool>& container) {
    // Check if input data size is a multiple of 4 (number of 6-bit objects per byte)
    if (data.size() % 4 != 0) {
        throw std::invalid_argument("Input data size must be a multiple of 4");
    }

           // Iterate over the input data 4 elements at a time
    for (size_t i = 0; i < data.size(); i += 4) {
        // Extract 6 bits from each data element
        unsigned char byte =
            ((data[i] & 0x3F) << 6) |  // Shift first element by 6 bits
            ((data[i + 1] & 0x3F) << 3) |  // Shift second element by 3 bits
            ((data[i + 2] & 0x3F) << 0);   // No shift for third element

        // Add each bit of the byte to the container
        for (int j = 7; j >= 0; --j) {
            container.push_back((byte >> j) & 1);
        }
    }
}

void shift6BitObjectIntoContainer(std::vector<bool>& container, int start, int object) {  // Gen AI answer
    if (start + 6 > container.size()) {
        throw std::invalid_argument("Not enough space in the container to hold the 6-bit object.");
    }

    for (int i = 0; i < 6; ++i) {
        container[start + i] = (object >> (5 - i)) & 1;
    }
}
*/

void print_bitset(std::bitset<132> bs, int count) {
    for (int i{bs.size()-1}; i >= 0 ; --i ) {
        //cout << "index:" << i <<":";
        //cout << bs[i];
        cout << bs.test(i);
        if ( i !=0 && i%count ==0 ) cout << "'";
    }
    cout << "." << endl;
}

void print_bitset_mem_addrs(std::bitset<132> bs, int count) {
    //auto ptr_msb_begin{&(bs.data())};
    auto ptr_msb_begin{&bs};
    auto ptr_lsb_end{(&bs)+1};
    //auto ptr_lsb_end_plus_one{&(bs.)+1};
    auto ptr_lsb_end_plus_one{&(bs)+1};
    cout << "$$ sizeof bs: "<< sizeof(bs) << endl;
    cout << "$$ &bs: "<< ptr_msb_begin << endl;
    cout << "$$ &bs_lsb: "<< ptr_lsb_end << endl;
    cout << "$$ &bs_lsb_plus_one: "<< ptr_lsb_end_plus_one << endl;
    cout << "$$ &bs.to_string(): "<< bs.to_string() << endl;
    for ( int i{bs.size()-1}; i >= 0 ; --i ) {
        //cout << "index:" << i <<":";
        //cout << bs[i];
        //cout << bs.test(i);
        //if ( i !=0 && i%count ==0 ) cout << "'";
    }
    cout << "." << endl;
}

struct Counter {
    std::array<uint8_t, 32> words_single_char{
                                               '@',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               //  std::rand()/ ((RAND_MAX + 1u) / 256),
                                               'A',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'B',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'C',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'Z',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '[',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '\\',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               ']',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '^',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '_',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '\'',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'a',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'b',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'c',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'z',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '{',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '|',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '}',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '~',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W' };
    //  '.' };  // or more chars, they will simply be ignored
};

void test1 () {                     std::cout<< "START                Example1 test1. ++++++++++++++++++++++++"<<std::endl;
    std::srand(std::time(nullptr)); // use current time as seed for random generator

    Counter counter{};
    cout<< "$$ W is bits: 101 0111.\n"; cout<< "$$ Counter.words_.size(): " << counter.words_single_char.size() << ", list: " << counter.words_single_char << endl;

    // *** Construct binary key ***
    // using  Bits6_ut = struct { uint8_t bits6_ :6; };
    // struct Bits6_st          { uint8_t bits6_ :6; };
    std::bitset<132> chars_bits{};

    for ( size_t i{0}; i < chars_bits.size()/6; ++i) {
        if (i != 0 ) chars_bits  <<= 6;
        std::bitset<6>   char_bits6{counter.words_single_char.at(i)};  // TODO??: I cutoff 2 bits, but no warning??
        std::bitset<132> char_bits132{char_bits6.to_ulong()};
        chars_bits |= char_bits132;                                          //chars_bits |= char_bits6;  // TODO??: Strange error message with &bits6_ut ?
        //cout << "$$ Counter, bits: " <<std::setw(3)<< i <<",";
        //print_bitset(chars_bits,6);
    }
    print_bitset_mem_addrs(chars_bits,6);
    print_bitset(chars_bits,6);

    // *** Decode binary key to full words vector ***
    std::vector<std::string> result_full_words{};
    std::bitset<132>         mask_ones_6_of_132{   "111111"};
    std::bitset<132>         mask_ones_7th_of_132{"1000000"};
    std::bitset<132>         chars_bits_temp{chars_bits};

    for (size_t i = 0; i < 22; ++i) {  // get char, fix char, use char to lookup word, add to words

        std::bitset<132> bits_6_of_132{ chars_bits_temp & mask_ones_6_of_132};      // Grab one 6 bit char
        std::bitset<132> bits_7_of_132{ bits_6_of_132   | mask_ones_7th_of_132};    // Add top bit, ie. the 7th to make it US ASCII.

        size_t index {static_cast<size_t>(bits_7_of_132.to_ulong())};                // Convert US ASCII bits to an integer index.  TODO??: Why did I cast this, when apparently not needed.
        size_t index2{                    bits_7_of_132.to_ulong() };                // Convert US ASCII bits to an integer index.
        cout<< index2 << ", ";
        std::string word{DICTIONARY_WORDS.at(index)};
        result_full_words.push_back(word);
        chars_bits_temp >>= 6;
        // print_bitset(bits_6_of_132,8);
        // print_bitset(bits_7_of_132,8);
        // cout << "$$ Loop_i, index, word, size:\n";
        // cout << i <<","<< index<<","<<word << "," << full_words.size()<<endl;
        // print_bitset(chars_bits_temp, 6);
    }
    cout << endl;
    cout << "$$ Words after, size: " << result_full_words.size() <<", "<< result_full_words << endl;
    std::cout<< "END                  Example1 test1. ++++++++++++++++++++++++"<<std::endl;
} } // END namespace NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN

namespace Example2 { // NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN // packed struct as alternative to std::bitset example
struct Key_strange_alt { bool wide_bits :132 {1}; };

#pragma pack(1)
struct Key {  // POD plain old data,
    uint8_t  char01 :6 {0x3F};
    uint8_t  char02 :6 {0x3F};  //uint8_t  char02 :6 {0b1111'1111};
    uint8_t  char03 :6 {0x3F};  //uint8_t  char05 :6 {0b0001'1111};
    uint8_t  char04 :6 {0x3F};  //uint8_t  char03 :6 {0b0001'1111};
    uint8_t  char05 :6 {0x3F};  //uint8_t  char04 :6 {0b1111'1111};
    uint8_t  char06 :6 {0x3F};
    uint8_t  char07 :6 {0x3F};
    uint8_t  char08 :6 {0x3F};
    uint8_t  char09 :6 {0x3F};
    uint8_t  char10 :6 {0x3F};
    uint8_t  :4;                // filler for 64 bits
    // int f(){return};  // UDT
};
#pragma pack()
// TODO??: What about alignas() and depreciated: "std::aligned_storage"?
//uint128_t test128;
void test1 () {                     std::cout<< "START                Example2 test1. ++++++++++++++++++++++++"<<std::endl;
    Key key1;  //Key key2{}; Key key3{0};
    cout << "$$ Size Key:"<< sizeof(Key) << endl;
    cout << "$$ Size ull:"<< sizeof(unsigned long long) << endl;
    cout << "$$ Size ld:"<<  sizeof(long double) << endl;
    //cout << "$$ Size :"<<  sizeof(std::float128_t) << endl;

    std::bitset<72> bitset1{ * reinterpret_cast<unsigned long long *>(&key1) };
    std::bitset<72> bitset2{ std::bit_cast<unsigned long long>(key1) };
    //std::bitset<72> bitset3{ * reinterpret_cast<long double *>(&key1) };
    //std::bitset<72> bitset4{ std::bit_cast<long double>(key1) };

    cout << "$$ bitset1: "<< bitset1 << endl;
    cout << "$$ bitset2: "<< bitset2 << endl;

    //cout << bs.to_ullong() << endl;
    cout << "$$ std::hex:" << std::hex << bitset1.to_ullong() << endl;
    cout << "$$ std::hex:" << std::hex << bitset2.to_ullong() << endl;

    cout << std::setbase(6);
    cout << (int)key1.char01 << (int)key1.char02  << (int)key1.char03  << (int)key1.char04  << (int)key1.char05  << (int)key1.char06 <<  endl;
    cout << (int)key1.char07 << (int)key1.char08  << (int)key1.char09  << (int)key1.char10  << endl;

    cout << std::setbase(8);
    //cout << std::setbase(16) << (int)key1.char01 << (int)key1.char02  << (int)key1.char03  << (int)key1.char04  << (int)key1.char05  << (int)key1.char06 <<  endl;
    //cout << std::setbase(16) << (long)key1.char01 << (long)key1.char02  << (long)key1.char03  << (long)key1.char04  << (long)key1.char05  << (long)key1.char06 <<  endl;
    //cout << std::hex        << key1.char01 << key1.char02  << key1.char03  << key1.char04  << key1.char05  << key1.char06 <<  endl;

    std::cout<< "END                  Example2 test1. ++++++++++++++++++++++++"<<std::endl;
}
} // END namespace NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN

namespace Example3 { // NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
// *** the char * Question - experiments on how to remove UB (or non-standard ISO c++) in ChatScript code base.
//char * f( char * c_string_io) {  // Function signature is fixed, don't change it.
char * fX( char * c_string_io) {
    char *          x1  {"xx"};
    if (not c_string_io) c_string_io = "xx";
    return c_string_io;
}

std::string_view f_sv( char * c_string_io) {
    //char const *          x1  {"xx"};
    //if (not c_string_io) c_string_io = "xx";
    //return c_string_io_view;

    auto junk = c_string_io     ?  c_string_io : "xx";
    return junk;
    //return c_string_io     ?  c_string_io : "xx";

  //return not c_string_io ?  "xx" : static_cast<std::  > (c_string_io ;
}

char const * f( char c_string_io[]) {  // Function signature is fixed, don't change it.
    char const *    x0  {"xx"};
    char *          x1  {"xx"};  // return string_literal "abc"; Allowed to return x1 since it is statically allocated.  True of all literals?
    char            x2[]{"xx"};
    char const      x3[]{"xx"};
    char constexpr  x4[]{"xx"};
    char static     x5[]{"xx"};
    auto d1{[](auto p){std::cout<<"DELETINGd1.\n"; delete[] p;}};
    auto d2{[](auto p){std::cout<<"DELETINGd2.\n"; delete   p;}};
  //x0[1]='e';
    x1[1]='e';      // ERROR in TCPPPL P.176:  Wrong comment assumes declartion was const, or am I missing something?
    x2[1]='e';
  //x3[1]='e';
    std::unique_ptr<char[]>                                                               static const x8{new char[]{"xx"}};  // TODO??: works when {}s not ()s
    std::unique_ptr<char[], decltype([](auto p){std::cout<<"DELETING9.\n"; delete[] p;})> static const x9{new char[]{"xx"}};
    std::unique_ptr<char,   decltype([](auto p){std::cout<<"DELETINGA.\n"; delete[] p;})> static const xA{new char[]{"xx"}};
    std::unique_ptr<char,   decltype([](auto p){std::cout<<"DELETINGB.\n"; delete   p;})> static const xB{new char[]{"xx"}};
    std::unique_ptr<char,   decltype([](auto p){std::cout<<"DELETINGD.\n"; delete[] p;})> static const xC{new char[]{"xx"}};
    std::unique_ptr<char,   decltype(d1                                                )> static const xD{new char[]{"xx"},d1};
    std::unique_ptr<char,   decltype(d2                                                )> static const xE{new char[]{"xx"},d2};
    if (not c_string_io) c_string_io = "xx";                      // TODO??: Want to fix warning on this line, some attempts below:
    if (not c_string_io) c_string_io = const_cast<char *>("xx");  // TODO??: probably NOT good because misuse of const_cast?
    if (not c_string_io) c_string_io = x1;
    if (not c_string_io) c_string_io = x2;                        // TODO??: x3,x4 incompatible types
    if (not c_string_io) c_string_io = x5;
    if (not c_string_io) c_string_io = x8.get();
    if (not c_string_io) c_string_io = x9.get();
    if (not c_string_io) c_string_io = xA.get();
    if (not c_string_io) c_string_io = xB.get();
    if (not c_string_io) c_string_io = xC.get();
    if (not c_string_io) c_string_io = xD.get();
    if (not c_string_io) c_string_io = xE.get();
    if (not c_string_io) return "Not set by f()!";
    std::cout<< strlen(c_string_io) <<", "<<sizeof(c_string_io)<<std::endl;
    return c_string_io;
}
void test1 () {                     std::cout<< "START                Example3 test1. ++++++++++++++++++++++++"<<std::endl;
    char c_string[]{"yyy"};
    //std::cout << f_sv(c_string) << std::endl;
    //std::cout << f_sv(nullptr)  << std::endl;
    std::cout << f_sv(c_string) << std::endl;
    std::cout << f_sv(nullptr)  << std::endl;
    std::string my_string {"hello"};
    std::string_view junk {my_string};
    std::cout << junk ;
    std::cout<< "END                  Example3 test1. ++++++++++++++++++++++++"<<std::endl;
}

} // END namespace NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN

namespace Example4 { // NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
// boost dynamic_bitset as alternative to std::bitset example
struct Counter {
    std::array<uint8_t, 32> words_single_char{
                                               '@',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               //  std::rand()/ ((RAND_MAX + 1u) / 256),
                                               'A',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'B',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'C',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'Z',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '[',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '\\',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               ']',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '^',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '_',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '\'',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'a',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'b',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'c',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'z',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '{',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '|',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '}',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '~',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W' };
    //  '.' };  // or more chars, they will simply be ignored
};
void test1 () {                     std::cout<< "START                Example4 test1. ++++++++++++++++++++++++"<<std::endl;
    // boost::dynamic_bitset<std::byte> chars_bits{7ul};   // TODO??:
    // boost::dynamic_bitset<int8_t>  chars_bits2{7ul};   // TODO??:
    //boost::dynamic_bitset<> chars_bits{7ul};
    // using Bits_6_t = std::bitset<6>;  // not usable.
    boost::dynamic_bitset<uint8_t> chars_bits{7ul}; // 0000111
    boost::dynamic_bitset<uint8_t> chars_bits2{0ul};
    std::bitset<6> bits_6{0b0'000'001};
    uint8_t byte_with_bits_6_of_8 {static_cast<uint8_t>(bits_6.to_ulong())};
    uint8_t byte_with_bits_6_of_8a{0b0'000'001};
    uint8_t byte_with_bits_6_of_8b{0b0'000'011};
    uint8_t byte_with_bits_6_of_8c{0b0'000'101};

    /* chars_bits.at(1) = 1;
    // chars_bits <<= 1;
    // Counter counter{};
    // cout<< "$$ W is bits: 101 0111.\n"; cout<< "$$ Counter.words_.size(): " << counter.words_single_char.size() << ", list: " << counter.words_single_char << endl;
    // cout<< "$$ char_bits.size(): " << chars_bits.size() <<", content: "<< chars_bits << endl;
    // cout<< "$$ sizeof(char_bits) in bytes: " << sizeof(chars_bits)<< endl;

    // // *** Construct binary key ***
    // auto junk {chars_bits << counter.words_single_char.at(1)}; cout<< "$$ junk.size(): " << junk.size() <<", content: "<< junk << endl;
    // for ( size_t i{0}; i < counter.words_single_char.size(); ++i) {
    //     if (i != 0 ) chars_bits  <<= 1;
    //     chars_bits <<= 1;
    //     //chars_bits <<= counter.words_single_char.at(1);
    //     cout<< "$$ in loop, char_bits.size(): " << chars_bits.size() <<", content:"<< chars_bits <<":"<< endl;
    // } */
    //chars_bits.append(bits_6_t);
    chars_bits2.append(byte_with_bits_6_of_8a);
    chars_bits2.append(byte_with_bits_6_of_8b);
    chars_bits2.append(byte_with_bits_6_of_8c);
    cout << "$$ byte,bits:" << (int)byte_with_bits_6_of_8 <<";"<< chars_bits2 << endl;

    //std::reverse(); //for ( 1;; ) { ; };
    boost::dynamic_bitset<uint8_t> chars_bits_transformed{8*3};
    do {
        size_t i{chars_bits2.size()};
        if (i != 0 ) chars_bits_transformed  <<= 1;
        chars_bits_transformed.set(0, chars_bits2.at(i-1));
        chars_bits_transformed <<= 1;
        //chars_bits_transformed |= chars_bits2[i-1];
        chars_bits2.pop_back();
    }
    while ( chars_bits2.size() > 0 );

    cout << "$$ bits_transformed:" << chars_bits_transformed << endl;

    // *** Decode binary key to full words vector ***

    std::cout<< "END                  Example4 test1. ++++++++++++++++++++++++"<<std::endl;
}
} // END namespace NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN

namespace Example5 { // NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
// boost multiprecision as alternative to std::bitset example
struct Counter {
    std::array<uint8_t, 32> words_single_char{
                                               '@',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               //  std::rand()/ ((RAND_MAX + 1u) / 256),
                                               'A',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'B',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'C',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'Z',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '[',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '\\',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               ']',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '^',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '_',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '\'',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'a',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'b',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'c',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'z',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '{',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '|',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '}',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '~',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W' };
    //  '.' };  // or more chars, they will simply be ignored
};
void test1 () {                     std::cout<< "START                Example4 test1. ++++++++++++++++++++++++"<<std::endl;
    // boost::dynamic_bitset<std::byte> chars_bits{7ul};   // TODO??:
    // boost::dynamic_bitset<int8_t>  chars_bits2{7ul};   // TODO??:
    //boost::dynamic_bitset<> chars_bits{7ul};
    // using Bits_6_t = std::bitset<6>;  // not usable.
    boost::dynamic_bitset<uint8_t> chars_bits{7ul}; // 0000111
    boost::dynamic_bitset<uint8_t> chars_bits2{0ul};
    std::bitset<6> bits_6{0b0'000'001};
    uint8_t byte_with_bits_6_of_8 {static_cast<uint8_t>(bits_6.to_ulong())};
    uint8_t byte_with_bits_6_of_8a{0b0'000'001};
    uint8_t byte_with_bits_6_of_8b{0b0'000'011};
    uint8_t byte_with_bits_6_of_8c{0b0'000'101};

    /* chars_bits.at(1) = 1;
    // chars_bits <<= 1;
    // Counter counter{};
    // cout<< "$$ W is bits: 101 0111.\n"; cout<< "$$ Counter.words_.size(): " << counter.words_single_char.size() << ", list: " << counter.words_single_char << endl;
    // cout<< "$$ char_bits.size(): " << chars_bits.size() <<", content: "<< chars_bits << endl;
    // cout<< "$$ sizeof(char_bits) in bytes: " << sizeof(chars_bits)<< endl;

    // // *** Construct binary key ***
    // auto junk {chars_bits << counter.words_single_char.at(1)}; cout<< "$$ junk.size(): " << junk.size() <<", content: "<< junk << endl;
    // for ( size_t i{0}; i < counter.words_single_char.size(); ++i) {
    //     if (i != 0 ) chars_bits  <<= 1;
    //     chars_bits <<= 1;
    //     //chars_bits <<= counter.words_single_char.at(1);
    //     cout<< "$$ in loop, char_bits.size(): " << chars_bits.size() <<", content:"<< chars_bits <<":"<< endl;
    // } */
    //chars_bits.append(bits_6_t);
    chars_bits2.append(byte_with_bits_6_of_8a);
    chars_bits2.append(byte_with_bits_6_of_8b);
    chars_bits2.append(byte_with_bits_6_of_8c);
    cout << "$$ byte,bits:" << (int)byte_with_bits_6_of_8 <<";"<< chars_bits2 << endl;

    //std::reverse(); //for ( 1;; ) { ; };
    boost::dynamic_bitset<uint8_t> chars_bits_transformed{8*3};
    do {
        size_t i{chars_bits2.size()};
        if (i != 0 ) chars_bits_transformed  <<= 1;
        chars_bits_transformed.set(0, chars_bits2.at(i-1));
        chars_bits_transformed <<= 1;
        //chars_bits_transformed |= chars_bits2[i-1];
        chars_bits2.pop_back();
    }
    while ( chars_bits2.size() > 0 );

    cout << "$$ bits_transformed:" << chars_bits_transformed << endl;

    // *** Decode binary key to full words vector ***

    std::cout<< "END                  Example4 test1. ++++++++++++++++++++++++"<<std::endl;
}
} // END namespace NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN

namespace Example6 { // NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN
    // std::vector of bool as alternative to std::bitset example
    struct Counter {
    std::array<uint8_t, 32> words_single_char{
                                               '@',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               //  std::rand()/ ((RAND_MAX + 1u) / 256),
                                               'A',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'B',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'C',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'Z',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '[',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '\\',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               ']',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '^',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '_',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '\'',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'a',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'b',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'c',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'z',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '{',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '|',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '}',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               '~',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W',
                                               // static_cast<uint8_t> ( std::rand()/ ((RAND_MAX + 1u) / 256)),
                                               'W' };
    //  '.' };  // or more chars, they will simply be ignored
};

void test1 () {                     std::cout<< "START                Example4 test1. ++++++++++++++++++++++++"<<std::endl;
    // boost::dynamic_bitset<std::byte> chars_bits{7ul};   // TODO??:
    // boost::dynamic_bitset<int8_t>  chars_bits2{7ul};   // TODO??:
    //boost::dynamic_bitset<> chars_bits{7ul};
    // using Bits_6_t = std::bitset<6>;  // not usable.
    boost::dynamic_bitset<uint8_t> chars_bits{7ul}; // 0000111
    boost::dynamic_bitset<uint8_t> chars_bits2{0ul};
    std::bitset<6> bits_6{0b0'000'001};
    uint8_t byte_with_bits_6_of_8 {static_cast<uint8_t>(bits_6.to_ulong())};
    uint8_t byte_with_bits_6_of_8a{0b0'000'001};
    uint8_t byte_with_bits_6_of_8b{0b0'000'011};
    uint8_t byte_with_bits_6_of_8c{0b0'000'101};

    /* chars_bits.at(1) = 1;
    // chars_bits <<= 1;
    // Counter counter{};
    // cout<< "$$ W is bits: 101 0111.\n"; cout<< "$$ Counter.words_.size(): " << counter.words_single_char.size() << ", list: " << counter.words_single_char << endl;
    // cout<< "$$ char_bits.size(): " << chars_bits.size() <<", content: "<< chars_bits << endl;
    // cout<< "$$ sizeof(char_bits) in bytes: " << sizeof(chars_bits)<< endl;

    // // *** Construct binary key ***
    // auto junk {chars_bits << counter.words_single_char.at(1)}; cout<< "$$ junk.size(): " << junk.size() <<", content: "<< junk << endl;
    // for ( size_t i{0}; i < counter.words_single_char.size(); ++i) {
    //     if (i != 0 ) chars_bits  <<= 1;
    //     chars_bits <<= 1;
    //     //chars_bits <<= counter.words_single_char.at(1);
    //     cout<< "$$ in loop, char_bits.size(): " << chars_bits.size() <<", content:"<< chars_bits <<":"<< endl;
    // } */
    //chars_bits.append(bits_6_t);
    chars_bits2.append(byte_with_bits_6_of_8a);
    chars_bits2.append(byte_with_bits_6_of_8b);
    chars_bits2.append(byte_with_bits_6_of_8c);
    cout << "$$ byte,bits:" << (int)byte_with_bits_6_of_8 <<";"<< chars_bits2 << endl;

    //std::reverse(); //for ( 1;; ) { ; };
    boost::dynamic_bitset<uint8_t> chars_bits_transformed{8*3};
    do {
        size_t i{chars_bits2.size()};
        if (i != 0 ) chars_bits_transformed  <<= 1;
        chars_bits_transformed.set(0, chars_bits2.at(i-1));
        chars_bits_transformed <<= 1;
        //chars_bits_transformed |= chars_bits2[i-1];
        chars_bits2.pop_back();
    }
    while ( chars_bits2.size() > 0 );

    cout << "$$ bits_transformed:" << chars_bits_transformed << endl;

    // *** Decode binary key to full words vector ***

    std::cout<< "END                  Example4 test1. ++++++++++++++++++++++++"<<std::endl;
}
} // END namespace NNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNNN

int main(int argc, char* arv[]) { string my_arv{*arv}; cout << "~~~ argc, argv:"<<argc<<","<<my_arv<<"."<<endl; cin.exceptions( std::istream::failbit); Detail::crash_signals_register();
  //Example1::test1 ();
  //Example2::test1 ();
  //Example3::test1 ();
  //Example4::test1 ();
    Example5::test1 ();
  //Example6::test1 ();

    cout << "###" << endl;
    return EXIT_SUCCESS;
}
